"""Generate MySQL init script for the SecRL ArcOps-Cyber dataset.

The script scans the decompressed HuggingFace dump (`data_anonymized`) and
creates a single SQL file that:

* Creates one database per incident (e.g., `incident_38`).
* Defines tables based on the corresponding `.meta` schema files.
* Loads each CSV with `LOAD DATA INFILE` using the `❖` delimiter.
* Provisions a read-only `atlas` user for downstream runtime access.
"""

from __future__ import annotations

import json
import re
from pathlib import Path

DATA_ROOT = Path("paper_assets/arcops_cyber/data/data_anonymized/incidents")
SQL_OUTPUT = Path("paper_assets/arcops_cyber/mysql/init.sql")
SKIP_TABLES = {
    "AzureDiagnostics",
    "LAQueryLogs",
}

# Mapping from SecRL metadata types to MySQL column definitions.
TYPE_MAP: dict[str, str] = {
    "string": "TEXT",
    "datetime": "TEXT",
    "bool": "TEXT",
    "boolean": "TEXT",
    "long": "TEXT",
    "int": "TEXT",
    "real": "TEXT",
    "double": "TEXT",
    "float": "TEXT",
}


def normalise_identifier(name: str) -> str:
    """Ensure MySQL-safe identifiers."""

    safe = re.sub(r"[^0-9A-Za-z_]", "_", name)
    if safe and safe[0].isdigit():
        safe = f"col_{safe}"
    if len(safe) > 60:
        safe = safe[:60]
    return safe or "col_unnamed"


def emit_table_sql(incident_dir: Path) -> list[str]:
    """Create CREATE TABLE + LOAD DATA statements for a single incident."""

    statements: list[str] = []
    incident_id = incident_dir.name.split("_")[-1]
    statements.append(f"CREATE DATABASE IF NOT EXISTS incident_{incident_id};")
    statements.append(f"USE incident_{incident_id};")

    for meta_path in sorted(incident_dir.glob("*.meta")):
        table_name = normalise_identifier(meta_path.stem)
        csv_path = meta_path.with_suffix(".csv")
        if not csv_path.exists():
            continue

        schema = json.loads(meta_path.read_text())
        if meta_path.stem in SKIP_TABLES:
            continue
        columns_sql: list[str] = []
        column_names: list[str] = []
        used_names: dict[str, int] = {}
        for raw_name, raw_type in schema.items():
            column_name = normalise_identifier(raw_name)
            base_name = column_name
            counter = 2
            key = column_name.lower()
            while key in used_names:
                column_name = f"{base_name}_{counter}"
                key = column_name.lower()
                counter += 1
            used_names[key] = 1
            column_names.append(column_name)
            sql_type = TYPE_MAP.get(raw_type.lower(), "TEXT")
            columns_sql.append(f"`{column_name}` {sql_type}")

        create_stmt = f"CREATE TABLE IF NOT EXISTS `{table_name}` (\n  {', '.join(columns_sql)}\n) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;"
        statements.append(create_stmt)

        columns_list = ", ".join(f"`{name}`" for name in column_names)
        relative_csv = csv_path.relative_to(DATA_ROOT.parent.parent)
        infile_path = f"/var/lib/mysql-files/{relative_csv.as_posix()}"
        load_stmt = (
            "LOAD DATA INFILE "
            f"'{infile_path}' "
            f"INTO TABLE `{table_name}` "
            "CHARACTER SET utf8mb4 "
            "FIELDS TERMINATED BY '❖' ENCLOSED BY '\"' "
            "LINES TERMINATED BY '\\n' "
            "IGNORE 1 LINES "
            f"({columns_list});"
        )
        statements.append(load_stmt)
    statements.append("")
    return statements


def main() -> None:
    SQL_OUTPUT.parent.mkdir(parents=True, exist_ok=True)
    lines: list[str] = [
        "-- Auto-generated by scripts/arcops_cyber/generate_secrl_sql.py",
        "SET GLOBAL local_infile = 1;",
    ]
    incidents = sorted(p for p in DATA_ROOT.iterdir() if p.is_dir())
    for incident_dir in incidents:
        lines.extend(emit_table_sql(incident_dir))

    # Provision readonly user (after all databases exist).
    lines.extend(
        [
            "CREATE USER IF NOT EXISTS 'atlas'@'%' IDENTIFIED BY 'atlas';",
            "GRANT SELECT ON `incident_%`.* TO 'atlas'@'%';",
            "FLUSH PRIVILEGES;",
        ]
    )

    SQL_OUTPUT.write_text("\n".join(lines), encoding="utf-8")
    print(f"Wrote MySQL init script to {SQL_OUTPUT}")


if __name__ == "__main__":
    main()
